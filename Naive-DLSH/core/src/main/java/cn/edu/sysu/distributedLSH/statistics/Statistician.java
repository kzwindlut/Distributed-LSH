package cn.edu.sysu.distributedLSH.statistics;

import java.io.IOException;
import java.lang.Math;

import org.apache.hadoop.conf.Configuration;
import org.apache.hadoop.conf.Configured;
import org.apache.hadoop.fs.FSDataInputStream;
import org.apache.hadoop.fs.FSDataOutputStream;
import org.apache.hadoop.fs.FileStatus;
import org.apache.hadoop.fs.FileSystem;
import org.apache.hadoop.fs.Path;
import org.apache.hadoop.mapreduce.Job;
import org.apache.hadoop.mapreduce.lib.input.TextInputFormat;
import org.apache.hadoop.mapreduce.lib.output.FileOutputFormat;

import cn.edu.sysu.distributedLSH.common.LSHTool;


public class Statistician extends Configured {
    private Configuration conf;
    private FileSystem fs;
    
    private int ratio;
    private String baseDir;
    private String dataSetFileName;
    
    
    /**
     * Constructor.
     * */
    public Statistician(final Configuration conf, final FileSystem fs) {
        this.conf = conf;
        this.fs = fs;
        
        ratio = conf.getInt("ratio", -1);
        if (ratio < 1) {
            LSHTool.printAndExit("ratio error in Statistician");
        }

        baseDir = conf.get("baseDir");
        dataSetFileName = conf.get("dataSetFileName");
    }
    
    /**
     * run.
     * */
    public int run() throws IOException, InterruptedException, ClassNotFoundException {
        long startMillis;
        int totalSecond;

        startMillis = System.currentTimeMillis();
        boolean flag = this.getStatistics();
        totalSecond = (int)((System.currentTimeMillis() - startMillis) / 1000.0);

        System.out.printf("---------------------------------------------------------------\n");
        System.out.printf("Data Set: %s, Time of get statistics %s\n", conf.get("dataset"),
                LSHTool.convertTime(totalSecond));
        System.out.printf("---------------------------------------------------------------\n");

        if (flag) {
            this.collect();
        } else {
            LSHTool.printAndExit("get statistics failed");
        }

        return 0;
    }
    
    /**
     * Get statistics of the data set using MapReduce.
     * */
    private boolean getStatistics() throws  IOException, InterruptedException, ClassNotFoundException {
        // Everything in the baseDir including statistics file, built LSHs and hash tables
        // will be deleted.
        fs.delete(new Path(baseDir), true);

        Path inputPath = new Path(dataSetFileName);
        if (!fs.exists(inputPath)) {
            LSHTool.printAndExit("Input data set dose not exist");
        }
        if (!fs.isFile(inputPath)) {
            LSHTool.printAndExit("Input data set should be a file");
        }

        Job job = new Job(conf, "ndlsh Statistician " + conf.get("dataset"));
        job.setJarByClass(Statistician.class);
        job.setMapperClass(StatisticsMapper.class);
        // We do not need reduce here.
        job.setNumReduceTasks(0);

        job.setInputFormatClass(TextInputFormat.class);

        // TODO
        job.setSpeculativeExecution(false);

        TextInputFormat.addInputPath(job, inputPath);
        String outFile = baseDir + "/statisticsOutput";
        FileOutputFormat.setOutputPath(job, new Path(outFile));

        return job.waitForCompletion(true);
    }
    
    /**
     * Collect the statistics file generated by all mappers and output the final
     * statistics file to hdfs.
     * @throws IOException 
     * */
    private void collect() throws IOException {
        // variables to be put in the final statistics file
        int dimension = -1;
        int maxCoordinate = -1;
        int dataSetSize = 0;
        int nRadii = -1;    // the number of radii on which we construct LSHs

        Path statPath =  new Path(baseDir + "/stat");
        FileStatus[] fileStatus = fs.listStatus(statPath);
        int coordinate;
        int size;

        for (int i = 0; i < fileStatus.length; i++) {
            FSDataInputStream in = fs.open(fileStatus[i].getPath());
            try {
                dimension = in.readInt();
                coordinate = in.readInt();
                if (coordinate > maxCoordinate) {
                    maxCoordinate = coordinate;
                }
                size = in.readInt();
                dataSetSize += size;
            } finally {
                in.close();
            }
        }
        
        // ratio ^ (nRadii - 1) >= sqrt(dimension) * maxCoordinate
        double maxDistance = Math.sqrt(dimension) * maxCoordinate;
        nRadii = 1 + (int)Math.floor(Math.log(maxDistance) / Math.log(ratio));
        
        if (dimension < 1 || maxCoordinate < 1 || dataSetSize < 1 || nRadii < 1) {
            LSHTool.printAndExit("statistics error");
        }
        
        // TODO delete
        System.out.printf("dim: %d\n", dimension);
        System.out.printf("t: %d\n", maxCoordinate);
        System.out.printf("n: %d\n", dataSetSize);
        System.out.printf("nRadii: %d\n", nRadii);
        
        // output the final statistics file
        String outFile = baseDir + "/stat/final.stat";
        Path outPath = new Path(outFile);

        fs.delete(outPath, false);
        
        FSDataOutputStream out = fs.create(outPath);
        try {
            out.writeInt(dimension);
            out.writeInt(maxCoordinate);
            out.writeInt(dataSetSize);
            out.writeInt(nRadii);
        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            out.close();
        }
    }
}
